    params = {
        'iterations': trial.suggest_int('iterations', 100, 1000),
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
        'depth': trial.suggest_int('depth', 4, 10),
        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1e-9, 10, log=True),
        'bagging_temperature': trial.suggest_float('bagging_temperature', 0, 1),
        'border_count': trial.suggest_int('border_count', 1, 255),
        'random_strength': trial.suggest_float('random_strength', 1e-9, 10, log=True),
        'grow_policy': trial.suggest_categorical('grow_policy', ['SymmetricTree', 'Depthwise', 'Lossguide']),
        'min_child_samples': trial.suggest_int('min_child_samples', 1, 20),
        'custom_metric': trial.suggest_categorical('custom_metric', ['RMSE', 'MAE', 'Poisson']),
        'subsample': trial.suggest_float('subsample', 0.1, 1.0),
        'rsm': trial.suggest_float('rsm', 0.1, 1.0),
        'colsample_bylevel': trial.suggest_float('colsample_bylevel', 0.1, 1.0),
        'colsample_bynode': trial.suggest_float('colsample_bynode', 0.1, 1.0),
        'min_child_weight': trial.suggest_float('min_child_weight', 1e-9, 10, log=True),
        'max_bin': trial.suggest_int('max_bin', 1, 255),
        'scale_pos_weight': trial.suggest_float('scale_pos_weight', 1e-6, 10, log=True),
        'bootstrap_type': trial.suggest_categorical('bootstrap_type', ['Bayesian', 'Bernoulli', 'MVS']),
        'one_hot_max_size': trial.suggest_int('one_hot_max_size', 2, 16),
        'max_depth': trial.suggest_int('max_depth', 5, 15),
        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 1, 20),
        'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations', 1, 10)}
